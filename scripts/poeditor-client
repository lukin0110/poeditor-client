#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import argparse
import os

try:
    from ConfigParser import SafeConfigParser, ConfigParser, DEFAULTSECT
except:
    from configparser import SafeConfigParser, ConfigParser, DEFAULTSECT

from poeditor import POEditorAPI


def load_config(filename):
    config_file = os.path.join('.', filename)
    parser = SafeConfigParser()
    parser.read(config_file)
    return parser


def download(config, languages=None):
    client = POEditorAPI(api_token=config.get("main", "apikey"))
    sections = config.sections()

    for section in sections:
        if not section.startswith("project."):
            continue

        print("Project: {}".format(section))
        project_id = config.get(section, "project_id")
        file_type = config.get(section, "type")
        options = config.options(section)

        for option in options:
            if option.startswith("trans."):
                language = option.split('.', 1)[-1]
                if languages and language not in languages:
                    continue

                export_path = config.get(section, option)
                if not export_path.startswith('/'):
                    export_path = os.path.join('.', export_path)

                parent_dir = os.path.dirname(export_path)
                if not os.path.exists(parent_dir):
                    os.makedirs(parent_dir)

                print("    Pulling language '{}'...".format(language))
                client.export(project_id, language_code=language, file_type=file_type,
                              local_file=export_path)


def upload(config, languages=None, overwrite=False, sync_terms=False):
    client = POEditorAPI(api_token=config.get("main", "apikey"))
    sections = config.sections()

    for section in sections:
        if not section.startswith("project."):
            continue

        print("Project: {}".format(section))
        project_id = config.get(section, "project_id")
        file_type = config.get(section, "type")
        options = config.options(section)

        for option in options:
            if option.startswith("trans."):
                import_path = config.get(section, option)
                language = option.split('.', 1)[-1]
                if languages and language not in languages:
                    continue

                if not os.path.exists(import_path):
                    print("Error: {path} doesn't exist: ignoring language '{language}'"
                          .format(path=import_path, language=language))
                    continue

                print("    Pushing language '{}'...".format(language))
                client.update_terms_definitions(
                    project_id, language_code=language, file_path=import_path,
                    overwrite=overwrite, sync_terms=sync_terms
                )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--config-file', '-f', default=".translations")
    parser.add_argument('--overwrite', default=False, action="store_true",
                        help="Overwrites definitions when pushing a file.")
    parser.add_argument('--sync-terms', default=False, action="store_true",
                        help="Syncing terms deletes terms that are not found in the pushed file and adds new ones.")
    parser.add_argument('command', choices=('pull', 'push'))
    parser.add_argument('language', default=None, nargs="*")

    args = parser.parse_args()
    if not args.language:
        args.language = None

    config = load_config(args.config_file)
    if args.command == "pull":
        download(config, languages=args.language)
    elif args.command == "push":
        upload(config, languages=args.language, overwrite=args.overwrite,
               sync_terms=args.sync_terms)
